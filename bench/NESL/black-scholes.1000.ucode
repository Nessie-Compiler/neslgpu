FUNC MAIN2_1
CONST INT 1000
CONST FLOAT 100.0
COPY 1 1
MAKE_SEGDES
CPOP 1 1
COPY 1 1
DIST FLOAT
COPY 1 1
CALL RAND_13
CONST FLOAT 100.0
COPY 1 3
MAKE_SEGDES
CPOP 1 1
COPY 1 1
DIST FLOAT
COPY 1 1
CALL RAND_13
CONST FLOAT 1.0
COPY 1 5
MAKE_SEGDES
CPOP 1 1
COPY 1 1
DIST FLOAT
COPY 1 1
CALL RAND_13
CONST FLOAT 0.05
COPY 1 7
MAKE_SEGDES
CPOP 1 1
COPY 1 1
DIST FLOAT
COPY 1 1
CALL RAND_13
CONST FLOAT 0.4
CPOP 1 9
MAKE_SEGDES
CPOP 1 1
COPY 1 1
DIST FLOAT
COPY 1 1
CALL RAND_13
START_TIMER
COPY 1 3
LENGTHS
CPOP 1 2
LENGTHS
!= INT
IF
CONST CHAR "
RUNTIME ERROR: Length mismatch in an apply-to-each.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
ENDIF
COPY 1 5
LENGTHS
CPOP 1 4
LENGTHS
!= INT
IF
CONST CHAR "
RUNTIME ERROR: Length mismatch in an apply-to-each.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
POP 1 1
ENDIF
COPY 1 6
LENGTHS
CPOP 1 5
LENGTHS
!= INT
IF
CONST CHAR "
RUNTIME ERROR: Length mismatch in an apply-to-each.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
POP 1 1
ENDIF
COPY 1 7
LENGTHS
CPOP 1 6
LENGTHS
!= INT
IF
CONST CHAR "
RUNTIME ERROR: Length mismatch in an apply-to-each.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
POP 1 1
ENDIF
COPY 2 4
COPY 1 8
CALL /_15
COPY 1 7
CALL LN_13
COPY 1 2
COPY 1 3
* FLOAT
CONST FLOAT 2.0
COPY 1 9
DIST FLOAT
COPY 1 9
CALL /_15
COPY 1 4
CPOP 1 1
+ FLOAT
COPY 1 5
* FLOAT
+ FLOAT
COPY 1 4
COPY 1 8
CALL SQRT_13
COPY 1 3
CPOP 1 1
* FLOAT
COPY 1 8
CALL /_15
COPY 1 4
COPY 1 8
CALL SQRT_13
CPOP 1 3
CPOP 1 1
* FLOAT
COPY 1 1
CPOP 1 1
- FLOAT
CPOP 1 1
COPY 1 7
CALL CND_13
CPOP 1 6
CPOP 1 1
* FLOAT
CPOP 1 3
COPY 1 6
CALL NEGATE_13
CPOP 1 4
* FLOAT
EXP
CPOP 1 4
CPOP 1 1
* FLOAT
CPOP 1 2
COPY 1 4
CALL CND_13
* FLOAT
- FLOAT
STOP_TIMER
CONST INT 0
CONST INT 0
COPY 1 1
CPOP 1 1
< INT
COPY 1 5
LENGTHS
COPY 1 2
CPOP 1 1
>= INT
OR BOOL
IF
CONST CHAR "
RUNTIME ERROR: Sequence reference (a[i]) out of bounds.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
POP 1 4
ENDIF
CPOP 1 3
CPOP 1 2
CPOP 1 4
EXTRACT FLOAT
POP 1 1
CPOP 1 1
RET

FUNC POW4_42
CPOP 1 1
I_TO_F
EXP
CPOP 2 1
CALL LN_13
* FLOAT
RET

FUNC /_15
CONST FLOAT 0.0
COPY 1 1
DIST FLOAT
COPY 1 2
CPOP 1 1
= FLOAT
COPY 1 1
LENGTHS
CPOP 1 1
B_TO_I
COPY 1 2
+_REDUCE INT
COPY 2 0
- INT
CONST INT 0
COPY 1 3
CPOP 1 1
= INT
IF
CONST BOOL ()
POP 3 1
ELSE
CPOP 1 1
COPY 1 2
= INT
IF
CONST CHAR "
RUNTIME ERROR: Divide by zero.
"
WRITE CHAR
EXIT
ELSE
CPOP 1 1
= INT
IF
CONST BOOL F
COPY 1 1
DIST BOOL
ELSE
CONST CHAR "
RUNTIME ERROR: Divide by zero.
"
WRITE CHAR
EXIT
ENDIF
ENDIF
ENDIF
CPOP 2 2
/ FLOAT
POP 2 1
RET

FUNC NEGATE_13
CONST FLOAT 0.0
CPOP 1 1
DIST FLOAT
CPOP 1 1
- FLOAT
RET

FUNC CND_13
CONST FLOAT 0.31938153
COPY 1 1
DIST FLOAT
CONST FLOAT 0.356563782
CONST FLOAT 0.0
CPOP 1 1
- FLOAT
COPY 1 2
DIST FLOAT
CONST FLOAT 1.781477937
COPY 1 3
DIST FLOAT
CONST FLOAT 1.821255978
CONST FLOAT 0.0
CPOP 1 1
- FLOAT
COPY 1 4
DIST FLOAT
CONST FLOAT 1.330274429
COPY 1 5
DIST FLOAT
CONST FLOAT 4.0
CONST FLOAT 1.0
ATAN
* FLOAT
COPY 1 6
DIST FLOAT
COPY 2 6
CALL PLUSP_13
COPY 2 7
CALL NEGATE_13
CPOP 1 1
COPY 1 9
CPOP 1 2
SELECT FLOAT
CONST FLOAT 1.0
COPY 1 8
DIST FLOAT
CONST FLOAT 1.0
COPY 1 9
DIST FLOAT
CONST FLOAT 0.2316419
COPY 1 10
DIST FLOAT
COPY 1 3
* FLOAT
+ FLOAT
COPY 1 9
CALL /_15
CONST FLOAT 1.0
COPY 1 9
DIST FLOAT
CONST FLOAT 1.0
COPY 1 10
DIST FLOAT
CONST FLOAT 2.0
COPY 1 11
DIST FLOAT
CPOP 1 5
* FLOAT
COPY 1 10
CALL SQRT_13
COPY 1 10
CALL /_15
COPY 1 3
COPY 1 10
CALL NEGATE_13
CPOP 1 4
* FLOAT
CONST FLOAT 2.0
COPY 1 10
DIST FLOAT
COPY 1 10
CALL /_15
EXP
* FLOAT
CPOP 1 7
COPY 1 3
* FLOAT
CPOP 1 7
COPY 1 4
* FLOAT
COPY 1 4
* FLOAT
+ FLOAT
CONST INT 3
COPY 1 8
DIST INT
COPY 1 4
CPOP 1 1
COPY 1 9
CALL POW4_42
CPOP 1 7
CPOP 1 1
* FLOAT
+ FLOAT
CONST INT 4
COPY 1 7
DIST INT
COPY 1 4
CPOP 1 1
COPY 1 8
CALL POW4_42
CPOP 1 6
CPOP 1 1
* FLOAT
+ FLOAT
CONST INT 5
COPY 1 6
DIST INT
CPOP 1 4
CPOP 1 1
COPY 1 6
CALL POW4_42
CPOP 1 4
CPOP 1 1
* FLOAT
+ FLOAT
* FLOAT
- FLOAT
CONST FLOAT 0.0
COPY 1 2
DIST FLOAT
CPOP 1 3
CPOP 1 1
< FLOAT
COPY 1 2
LENGTHS
COPY 1 1
B_TO_I
COPY 1 4
+_REDUCE INT
COPY 2 0
- INT
CONST INT 0
COPY 1 3
CPOP 1 1
= INT
IF
CONST FLOAT ()
POP 6 1
ELSE
CPOP 1 1
COPY 1 2
= INT
IF
CONST FLOAT 1.0
CPOP 1 5
DIST FLOAT
CPOP 1 4
- FLOAT
POP 3 1
ELSE
CPOP 1 1
= INT
IF
POP 1 2
POP 1 0
ELSE
CONST INT 0
CONST INT 1
COPY 1 4
INDEX
CPOP 1 1
COPY 1 3
PACK INT
COPY 1 3
LENGTHS
COPY 1 1
DIST INT
CONST INT 0
COPY 1 2
DIST INT
COPY 1 3
CPOP 1 1
< INT
COPY 1 3
CPOP 1 2
>= INT
OR BOOL
COPY 1 1
OR_REDUCE BOOL
IF
CONST CHAR "
RUNTIME ERROR: Index out of bounds for function ->.
"
WRITE CHAR
EXIT
ELSE
CONST BOOL F
ENDIF
COPY 2 2
COPY 1 6
COPY 1 4
BPERMUTE FLOAT
CONST FLOAT 1.0
COPY 1 3
DIST FLOAT
CPOP 1 1
- FLOAT
CPOP 1 3
CPOP 2 3
CPOP 1 5
DPERMUTE FLOAT
POP 1 1
ENDIF
ENDIF
ENDIF
RET

FUNC SQRT_13
COPY 2 0
CALL MINUSP_13
COPY 1 1
LENGTHS
CPOP 1 1
B_TO_I
COPY 1 2
+_REDUCE INT
COPY 2 0
- INT
CONST INT 0
COPY 1 3
CPOP 1 1
= INT
IF
CONST BOOL ()
POP 3 1
ELSE
CPOP 1 1
COPY 1 2
= INT
IF
CONST CHAR "
RUNTIME ERROR: Sqrt of negative number.
"
WRITE CHAR
EXIT
ELSE
CPOP 1 1
= INT
IF
CONST BOOL F
COPY 1 1
DIST BOOL
ELSE
CONST CHAR "
RUNTIME ERROR: Sqrt of negative number.
"
WRITE CHAR
EXIT
ENDIF
ENDIF
ENDIF
CPOP 1 2
SQRT
POP 2 1
RET

FUNC MINUSP_13
CONST FLOAT 0.0
CPOP 1 1
DIST FLOAT
< FLOAT
RET

FUNC LN_13
COPY 2 0
CALL MINUSP_13
COPY 1 1
LENGTHS
CPOP 1 1
B_TO_I
COPY 1 2
+_REDUCE INT
COPY 2 0
- INT
CONST INT 0
COPY 1 3
CPOP 1 1
= INT
IF
CONST BOOL ()
POP 3 1
ELSE
CPOP 1 1
COPY 1 2
= INT
IF
CONST CHAR "
RUNTIME ERROR: Ln of negative number.
"
WRITE CHAR
EXIT
ELSE
CPOP 1 1
= INT
IF
CONST BOOL F
COPY 1 1
DIST BOOL
ELSE
CONST CHAR "
RUNTIME ERROR: Ln of negative number.
"
WRITE CHAR
EXIT
ENDIF
ENDIF
ENDIF
CPOP 1 2
LOG
POP 2 1
RET

FUNC PLUSP_13
CONST FLOAT 0.0
CPOP 1 1
DIST FLOAT
> FLOAT
RET

FUNC RAND_13
COPY 2 0
CALL PLUSP_13
NOT BOOL
COPY 1 1
LENGTHS
CPOP 1 1
B_TO_I
COPY 1 2
+_REDUCE INT
COPY 2 0
- INT
CONST INT 0
COPY 1 3
CPOP 1 1
= INT
IF
CONST BOOL ()
POP 3 1
ELSE
CPOP 1 1
COPY 1 2
= INT
IF
CONST CHAR "
RUNTIME ERROR: Rand only works with positive numbers.
"
WRITE CHAR
EXIT
ELSE
CPOP 1 1
= INT
IF
CONST BOOL F
COPY 1 1
DIST BOOL
ELSE
CONST CHAR "
RUNTIME ERROR: Rand only works with positive numbers.
"
WRITE CHAR
EXIT
ENDIF
ENDIF
ENDIF
CONST INT 1
CONST INT 30
LSHIFT
COPY 1 2
DIST INT
COPY 1 0
RAND
I_TO_F
CPOP 1 1
I_TO_F
CPOP 1 3
CALL /_15
CPOP 1 2
CPOP 1 1
* FLOAT
POP 1 1
RET
