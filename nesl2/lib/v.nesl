% vector-ops.nesl
=
= This file was generated from "vector-ops.lnesl" in the Nesl distribution and then
= hand edited to patch various issues.
%

%-- Nesl functions from "vector-ops.lnesl" --%
% not used and bogus [JHR]
__prim function prim_length (v) : alpha -> int :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "LENGTH INT" (v)
    | float: __prim "LENGTH FLOAT" (v)
    | char: __prim "LENGTH INT" (v)
    | bool: __prim "LENGTH BOOL" (v) $
%
function make_segdes (int) : int -> segdes =
  __prim "MAKE_SEGDES" (int) $
% duplicate [JHR]
function make_segdes (int) : int -> segdes =
  __prim "MAKE_SEGDES" (int) $
%
function prim_plus_reduce (v) : (int, segdes) -> int =
  __prim "+_REDUCE INT" (v) $
function prim_count (v, seg) : (bool, segdes) -> int =
  prim_plus_reduce(btoi(v), seg) $
function prim_seg_lengths (segdes) : segdes -> int =
  __prim "LENGTHS" (segdes) $
function length (v) : [alpha] -> int :: (alpha in any) =
  let __vector(segdes, values) = v;
  in
    prim_seg_lengths(segdes) $
%
function |#| (v) : [alpha] -> int :: (alpha in any) =
  let __vector(segdes, values) = v;
  in
    prim_seg_lengths(segdes) $
%
__prim function prim_dist_scalar (a, segdes) : (alpha, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "DIST INT" (a, segdes)
    | float: __prim "DIST FLOAT" (a, segdes)
    | char: __prim "DIST INT" (a, segdes)
    | bool: __prim "DIST BOOL" (a, segdes) $
function transpose_index (len, seg, segs2) : (int, segdes, segdes) -> int =
  let ind = prim_iseq(0, 1, seg);
      llen = prim_dist_scalar(len, seg);
  in
    prim_iseq(ind, llen, segs2) $
__prim function prim_dist (a, segdes) : (alpha, segdes) -> alpha :: (alpha in any) =
  __poly_typecase alpha
    | prim_dist_scalar(a, segdes)
    | let i = prim_seg_lengths(segdes);
        __vector(sega, vala) = a;
        l = prim_seg_lengths(sega);
        __vector(ignore, pair(segs2, vals)) = {let seg = make_segdes(i);
          in
            pair(seg, prim_dist(v, seg)) : v in a};
        idx = transpose_index(l, sega, segs2);
        seg = make_segdes(i * l);
        __vector(seg, vals) = permute_nocheck(__vector(seg, vals), __vector(seg, idx));
        newseg = make_segdes(prim_dist_scalar(l, segdes));
    in
      __vector(newseg, vals) $
function dist (a, l) : (alpha, int) -> [alpha] :: (alpha in any) =
  let segdes = make_segdes(l);
  in
    __vector(segdes, prim_dist(a, segdes)) $
function seq_dist (a, l) : (alpha, int) -> [alpha] :: (alpha in any) =
  let segdes = make_segdes(l);
  in
    __vector(segdes, prim_dist(a, segdes)) $
function dist_l (v, w) : (alpha, [beta]) -> [alpha] :: (alpha in any; beta in any) =
  let __vector(w_segdes, junk) = w;
  in
    __vector(w_segdes, prim_dist(v, w_segdes)) $
function prim_iseq (init, stride, segdes) : (int, int, segdes) -> int =
  __prim "INDEX" (init, stride, segdes) $
function index_l (__vector(seg, val)) : [alpha] -> [int] :: (alpha in any) =
  __vector(seg, prim_iseq(0, 1, seg)) $
function index (l) : int -> [int] =
  let seg = make_segdes(l);
  in
    __vector(seg, prim_iseq(0, 1, seg)) $
function iseq_l (s, d, vec) =
  let __vector(seg, val) = vec;
  in
    __vector(seg, prim_iseq(s, d, seg)) $
function iseq1 (s, e) =
  let seg = make_segdes(e - s);
  in
    __vector(seg, prim_iseq(s, 1, seg)) $
function iseqm1 (s, e) =
  let seg = make_segdes(s - e);
  in
    __vector(seg, prim_iseq(s, -1, seg)) $
function iseq (s, d, e) =
  let len = (((e - s) - 1) + d) / d;
      seg = make_segdes(len);
  in
    __vector(seg, prim_iseq(s, d, seg)) $
__prim function prim_rep_scalar (D, I, V, S) : (alpha, int, alpha, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "REPLACE INT" (D, I, V, S)
    | float: __prim "REPLACE FLOAT" (D, I, V, S)
    | char: __prim "REPLACE INT" (D, I, V, S)
    | bool: __prim "REPLACE BOOL" (D, I, V, S) $
function positions_from_offsets (offsets, vals) : ([int], [[alpha]]) -> [int] :: (alpha in any) =
  flatten({iseq_l(o, 1, v) : o in offsets; v in vals}) $
function segrep (dest, val, index) : ([[alpha]], [alpha], int) -> [[alpha]] :: (alpha in any) =
  let dflag = rep(dist_l(t, dest), f, index);
      lengths = rep(v.length(dest), length(val), index);
      offset = plus_scan(lengths);
      soff = elt_nocheck(offset, index);
      spos = iseq_l(soff, 1, val);
      dvals = old_pack(dest, dflag);
      dpos = positions_from_offsets(old_pack(offset, dflag), dvals);
  in
    partition(join(val, spos, flatten(dvals), dpos), lengths) $
__prim function rep (d, v, i) : ([alpha], alpha, int) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | let __vector(seg, vect) = d;
    in
      __vector(seg, prim_rep_scalar(vect, i, v, seg))
    | segrep(d, v, i) $
__prim function prim_extract (V, I, S) : (alpha, int, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "EXTRACT INT" (V, I, S)
    | float: __prim "EXTRACT FLOAT" (V, I, S)
    | char: __prim "EXTRACT INT" (V, I, S)
    | bool: __prim "EXTRACT BOOL" (V, I, S) $
function elt_indices (seg_lengths, i) : ([int], int) -> [int] =
  let offset = elt_nocheck(plus_scan(seg_lengths), i);
      length = elt_nocheck(seg_lengths, i);
  in
    iseq1(offset, offset + length) $
__prim function elt_nocheck (a, i) : ([alpha], int) -> alpha :: (alpha in any) =
  __poly_typecase alpha
    | let __vector(seg, val) = a;
    in
      prim_extract(val, i, seg)
    | get_nocheck(flatten(a), elt_indices(v.length(a), i)) $
function elt (a, i) =
  elt_nocheck(a, i) $
__prim function plus_scan (a) : [alpha] -> [alpha] :: (alpha in number) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "+_SCAN INT" (v, segdes))
    | float: let __vector(segdes, v) = a; in __vector(segdes, __prim "+_SCAN FLOAT" (v, segdes)) $
__prim function max_scan (a) : [alpha] -> [alpha] :: (alpha in ordinal) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "MAX_SCAN INT" (v, segdes))
    | float: let __vector(segdes, v) = a; in __vector(segdes, __prim "MAX_SCAN FLOAT" (v, segdes))
    | char: let __vector(segdes, v) = a; in __vector(segdes, __prim "MAX_SCAN INT" (v, segdes)) $
__prim function min_scan (a) : [alpha] -> [alpha] :: (alpha in ordinal) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "MIN_SCAN INT" (v, segdes))
    | float: let __vector(segdes, v) = a; in __vector(segdes, __prim "MIN_SCAN FLOAT" (v, segdes))
    | char: let __vector(segdes, v) = a; in __vector(segdes, __prim "MIN_SCAN INT" (v, segdes)) $
__prim function mult_scan (a) : [alpha] -> [alpha] :: (alpha in number) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "*_SCAN INT" (v, segdes))
    | float: let __vector(segdes, v) = a; in __vector(segdes, __prim "*_SCAN FLOAT" (v, segdes)) $
__prim function or_scan (a) : [alpha] -> [alpha] :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "OR_SCAN INT" (v, segdes))
    | bool: let __vector(segdes, v) = a; in __vector(segdes, __prim "OR_SCAN BOOL" (v, segdes)) $
__prim function and_scan (a) : [alpha] -> [alpha] :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "AND_SCAN INT" (v, segdes))
    | bool: let __vector(segdes, v) = a; in __vector(segdes, __prim "AND_SCAN BOOL" (v, segdes)) $
__prim function xor_scan (a) : [alpha] -> [alpha] :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, v) = a; in __vector(segdes, __prim "XOR_SCAN INT" (v, segdes))
    | bool: let __vector(segdes, v) = a; in __vector(segdes, __prim "XOR_SCAN BOOL" (v, segdes)) $
__prim function sum (v) : [alpha] -> alpha :: (alpha in number) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "+_REDUCE INT" (u, segdes)
    | float: let __vector(segdes, u) = v; in __prim "+_REDUCE FLOAT" (u, segdes) $
__prim function product (v) : [alpha] -> alpha :: (alpha in number) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "*_REDUCE INT" (u, segdes)
    | float: let __vector(segdes, u) = v; in __prim "*_REDUCE FLOAT" (u, segdes) $
__prim function max_val (v) : [alpha] -> alpha :: (alpha in ordinal) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "MAX_REDUCE INT" (u, segdes)
    | float: let __vector(segdes, u) = v; in __prim "MAX_REDUCE FLOAT" (u, segdes)
    | char: let __vector(segdes, u) = v; in __prim "MAX_REDUCE INT" (u, segdes) $
__prim function min_val (v) : [alpha] -> alpha :: (alpha in ordinal) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "MIN_REDUCE INT" (u, segdes)
    | float: let __vector(segdes, u) = v; in __prim "MIN_REDUCE FLOAT" (u, segdes)
    | char: let __vector(segdes, u) = v; in __prim "MIN_REDUCE INT" (u, segdes) $
__prim function any (v) : [alpha] -> alpha :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "OR_REDUCE INT" (u, segdes)
    | bool: let __vector(segdes, u) = v; in __prim "OR_REDUCE BOOL" (u, segdes) $
__prim function all (v) : [alpha] -> alpha :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "AND_REDUCE INT" (u, segdes)
    | bool: let __vector(segdes, u) = v; in __prim "AND_REDUCE BOOL" (u, segdes) $
__prim function parity (v) : [alpha] -> alpha :: (alpha in logical) =
  __base_typecase alpha
    | int: let __vector(segdes, u) = v; in __prim "XOR_REDUCE INT" (u, segdes)
    | bool: let __vector(segdes, u) = v; in __prim "XOR_REDUCE BOOL" (u, segdes) $
__prim function prim_permute_scalar (v, i, vs) : (alpha, int, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "PERMUTE INT" (v, i, vs)
    | float: __prim "PERMUTE FLOAT" (v, i, vs)
    | char: __prim "PERMUTE INT" (v, i, vs)
    | bool: __prim "PERMUTE BOOL" (v, i, vs) $
function segpermute (vals, i) : ([[alpha]], [int]) -> [[alpha]] :: (alpha in any) =
  let lengths = permute_nocheck(v.length(vals), i);
      offset = plus_scan(lengths);
      positions = positions_from_offsets(get_nocheck(offset, i), vals);
  in
    partition(permute_nocheck(flatten(vals), positions), lengths) $
__prim function permute_nocheck (v, i) : ([alpha], [int]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | let __vector(seg, v) = v;
        __vector(iseg, ivals) = i;
    in
      __vector(seg, prim_permute_scalar(v, ivals, seg))
    | segpermute(v, i) $
function permute (v, i) =
  permute_nocheck(v, i) $
__prim function prim_get_scalar (v, i, ss, ds) : (alpha, int, segdes, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "BPERMUTE INT" (v, i, ss, ds)
    | float: __prim "BPERMUTE FLOAT" (v, i, ss, ds)
    | char: __prim "BPERMUTE INT" (v, i, ss, ds)
    | bool: __prim "BPERMUTE BOOL" (v, i, ss, ds) $
function segget (a, i) : ([[alpha]], [int]) -> [[alpha]] :: (alpha in any) =
  let alengths = v.length(a);
      aoffsets = plus_scan(alengths);
      lengths = get_nocheck(alengths, i);
      offsets = flatten({iseq1(off, len + off) : off in get_nocheck(aoffsets, i); len in lengths});
  in
    partition(get_nocheck(flatten(a), offsets), lengths) $
__prim function get_nocheck (values, indices) : ([alpha], [int]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | let __vector(seg, vals) = values;
        __vector(segi, valsi) = indices;
    in
      __vector(segi, prim_get_scalar(vals, valsi, seg, segi))
    | segget(values, indices) $
function `->` (values, indices) =
  get_nocheck(values, indices) $
function read (values, indices) =
  values -> indices $
__prim function prim_put_scalar (v, i, d, vs, ds) : (alpha, int, alpha, segdes, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "DPERMUTE INT" (v, i, d, vs, ds)
    | float: __prim "DPERMUTE FLOAT" (v, i, d, vs, ds)
    | char: __prim "DPERMUTE INT" (v, i, d, vs, ds)
    | bool: __prim "DPERMUTE BOOL" (v, i, d, vs, ds) $
function put_scalar (v, i, d) : ([alpha], [int], [alpha]) -> [alpha] :: (alpha in any) =
  let __vector(vs, vdata) = v;
      __vector(is, idata) = i;
      __vector(ds, ddata) = d;
  in
    __vector(ds, prim_put_scalar(vdata, idata, ddata, vs, ds)) $
function segput (vals, i, def) : ([[alpha]], [int], [[alpha]]) -> [[alpha]] :: (alpha in any) =
  let idx = index_l(i);
      tmp = put(idx, i, dist_l(-1, def));
      dflag = v.<(tmp, v.0);
      flg = v.=(idx, get_nocheck(tmp, i));
      pair(newvals, newi) = if not(all(flg))
        then pair(old_pack(vals, flg), old_pack(i, flg))
        else pair(vals, i);
      lengths = put(v.length(newvals), newi, v.length(def));
      offset = plus_scan(lengths);
      spos = positions_from_offsets(get_nocheck(offset, newi), newvals);
      dvals = old_pack(def, dflag);
      dpos = positions_from_offsets(old_pack(offset, dflag), dvals);
  in
    partition(join(flatten(newvals), spos, flatten(dvals), dpos), lengths) $
__prim function put (v, i, d) : ([alpha], [int], [alpha]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | put_scalar(v, i, d)
    | segput(v, i, d) $
function segput_nocolision (vals, i, def) : ([[alpha]], [int], [[alpha]]) -> [[alpha]] :: (alpha in any) =
  let dflag = put(dist_l(f, i), i, dist_l(t, def));
      lengths = put(v.length(vals), i, v.length(def));
      offset = plus_scan(lengths);
      spos = positions_from_offsets(get_nocheck(offset, i), vals);
      dvals = old_pack(def, dflag);
      dpos = positions_from_offsets(old_pack(offset, dflag), dvals);
  in
    partition(join(flatten(vals), spos, flatten(dvals), dpos), lengths) $
__prim function put_nocolision (v, i, d) : ([alpha], [int], [alpha]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | put_scalar(v, i, d)
    | segput_nocolision(v, i, d) $
function eput (d, ivpairs) =
  let bindex = {b1 : pair(b1, b2) in ivpairs};
      bvals = {b2 : pair(b1, b2) in ivpairs};
  in
    put_nocolision(bvals, bindex, d) $
function `<-` (d, ivpairs) =
  let bindex = {b1 : pair(b1, b2) in ivpairs};
      bvals = {b2 : pair(b1, b2) in ivpairs};
  in
    put(bvals, bindex, d) $
function write (d, ivpairs) =
  d <- ivpairs $
function const_put (v, i, d) : (alpha, [int], [alpha]) -> [alpha] :: (alpha in any) =
  put(dist_l(v, i), i, d) $
__prim function prim_fpermute (v, i, flags, sseg, dseg) : (alpha, int, bool, segdes, segdes) -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: __prim "FPERMUTE INT" (v, i, flags, sseg, dseg)
    | float: __prim "FPERMUTE FLOAT" (v, i, flags, sseg, dseg)
    | char: __prim "FPERMUTE INT" (v, i, flags, sseg, dseg)
    | bool: __prim "FPERMUTE BOOL" (v, i, flags, sseg, dseg) $
function fpermute_hack (v, i, flags, dest) =
  let __vector(vseg, vval) = v;
      __vector(iseg, ival) = i;
      __vector(fseg, fval) = flags;
      __vector(dseg, dval) = dest;
  in
    __vector(dseg, prim_fpermute(vval, ival, fval, vseg, dseg)) $
function cond_put (v, i, flags, d) : ([alpha], [int], [bool], [alpha]) -> [alpha] :: (alpha in any) =
  put(old_pack(v, flags), old_pack(i, flags), d) $
__prim function identity_scalar (a) : alpha -> alpha :: (alpha in any) =
  __base_typecase alpha
    | int: 0
    | float: 0.000000
    | char: #\
    | bool: f $
__prim function identity (a) : alpha -> alpha :: (alpha in any) =
  __poly_typecase alpha
    | identity_scalar(a)
    | old_pack(a, {f : a}) $
__prim function len_put_scalar (v, i, l) : ([alpha], [int], int) -> [alpha] :: (alpha in any) =
  __base_typecase alpha
    | int: put_scalar(v, i, dist(0, l))
    | float: put_scalar(v, i, dist(0.000000, l))
    | bool: put_scalar(v, i, dist(f, l))
    | char: put_scalar(v, i, dist(#\, l))
    | function: let __vector(seg, val) = v;
    in
      __vector(make_segdes(l), val) $
function seglenput (a, i, l) : ([[alpha]], [int], int) -> [[alpha]] :: (alpha in any) =
  let lengths = put(v.length(a), i, dist(0, l));
      offset = plus_scan(lengths);
      positions = positions_from_offsets(get_nocheck(offset, i), a);
  in
    partition(permute_nocheck(flatten(a), positions), lengths) $
__prim function len_put (a, i, l) : ([alpha], [int], int) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | len_put_scalar(a, i, l)
    | seglenput(a, i, l) $
function segput_nocolision (a, i, l) : ([[alpha]], [int], int) -> [[alpha]] :: (alpha in any) =
  let lengths = put(v.length(a), i, dist(0, l));
      offset = plus_scan(lengths);
      positions = positions_from_offsets(get_nocheck(offset, i), a);
  in
    partition(permute_nocheck(flatten(a), positions), lengths) $
__prim function old_pack_scalar (v, flags) : ([alpha], [bool]) -> [alpha] :: (alpha in any) =
  __base_typecase alpha
    | int: %** tranlation failure: COPY 1 1; POP 1 2; PACK INT; COPY 1 1; POP 2 2 **%
    | float: %** tranlation failure: COPY 1 1; POP 1 2; PACK FLOAT; COPY 1 1; POP 2 2 **%
    | char: %** tranlation failure: COPY 1 1; POP 1 2; PACK INT; COPY 1 1; POP 2 2 **%
    | bool: %** tranlation failure: COPY 1 1; POP 1 2; PACK BOOL; COPY 1 1; POP 2 2 **%
    | function: %** tranlation failure: COPY 1 0; COPY 1 2; PACK BOOL; POP 3 1 **% $
__prim function old_pack (v, flags) : ([alpha], [bool]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | old_pack_scalar(v, flags)
    | partition(old_pack(flatten(v), flatten(v.dist_l(flags, v))), old_pack(v.length(v), flags)) $
__prim function pack_scalar (v, flags) : [alpha, bool] -> [alpha] :: (alpha in any) =
  __base_typecase alpha
    | int: %** tranlation failure: COPY 1 2; PACK INT; COPY 1 1; POP 2 2 **%
    | float: %** tranlation failure: COPY 1 2; PACK FLOAT; COPY 1 1; POP 2 2 **%
    | char: %** tranlation failure: COPY 1 2; PACK INT; COPY 1 1; POP 2 2 **%
    | bool: %** tranlation failure: COPY 1 2; PACK BOOL; COPY 1 1; POP 2 2 **%
    | function: __prim "PACK BOOL" (flags, v) $
__prim function pack (v) : [alpha, bool] -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | pack_scalar(v)
    | partition(pack(flatten({v.pair(val, v.flag) : pair(val, flag) in v})), pack({pair(length(val), flag)
      :
      pair(val, flag) in v}))
    | let __vector(seg, pair(pair(a, b), flag)) = v;
        __vector(seg1, val1) = pack(__vector(seg, pair(a, flag)));
        __vector(seg2, val2) = pack(__vector(seg, pair(b, flag)));
    in
      __vector(seg1, pair(val1, val2)) $
__prim function eql_scalar (a, b) : (alpha, alpha) -> bool :: (alpha in any) =
  __base_typecase alpha
    | int: a = b
    | float: a = b
    | char: a = b
    | bool: not(a xor b)
    | function: t $
__prim function eql (a, b) : (alpha, alpha) -> bool :: (alpha in any) =
  __poly_typecase alpha
    | eql_scalar(a, b)
    | if length(a) = length(b)
      then all(v.eql(a, b))
      else f
    | let pair(a1, a2) = a;
        pair(b1, b2) = b;
    in
      eql(a1, b1) and eql(a2, b2) $
function segselect (flag, v1, v2, seg) : (bool, [alpha], [alpha], segdes) -> [alpha] :: (alpha in any) =
  let idx = prim_iseq(0, 1, seg);
      i1 = pack_scalar(__vector(seg, pair(idx, flag)));
      i2 = pack_scalar(__vector(seg, pair(idx, not(flag))));
      p1 = get(__vector(seg, v1), i1);
      p2 = get(__vector(seg, v2), i2);
      __vector(s, v) = join(p1, i1, p2, i2);
  in
    v $
__prim function vselect (flag, v1, v2, seg) : (bool, alpha, alpha, segdes) -> alpha :: (alpha in any) =
  __poly_typecase alpha
    | select_scalar(flag, v1, v2)
    | segselect(flag, v1, v2, seg) $
__prim function select (flag, v1, v2) : (bool, alpha, alpha) -> alpha :: (alpha in any) =
  __poly_typecase alpha
    | select_scalar(flag, v1, v2)
    | if flag
      then v1
      else v2 $
% these need to be recoded [JHR]
function enumerate (flags) : [bool] -> [int] =
  plus_scan(v.btoi(flags)) $
function fseq (s, d, e) =
  v.plus(plus_scan(dist(d, 1 + trunc(abs(e - s) / abs(d)))), v.s) $
function count (v) : [bool] -> int =
  sum(v.btoi(v)) $
%
function plus_dist (v) : [alpha] -> [alpha] :: (alpha in number) =
  dist_l(sum(v), v) $
function max_dist (v) : [alpha] -> [alpha] :: (alpha in ordinal) =
  dist_l(max_val(v), v) $
function min_dist (v) : [alpha] -> [alpha] :: (alpha in ordinal) =
  dist_l(min_val(v), v) $
function max_index (v) : [alpha] -> int :: (alpha in ordinal) =
  let l = length(v);
  in
    min_val(v.select(v.=(max_dist(v), v), index_l(v), dist_l(l, v))) $
function min_index (v) : [alpha] -> int :: (alpha in ordinal) =
  let l = length(v);
  in
    min_val(v.select(v.=(min_dist(v), v), index_l(v), dist_l(l, v))) $
function rotate (a, i) : ([alpha], int) -> [alpha] :: (alpha in any) =
  let l = length(a);
      idx = iseq_l(i, 1, a);
  in
    permute_nocheck(a, {mod(idx, l) : idx}) $
function previous (a, v) : ([alpha], alpha) -> [alpha] :: (alpha in any) =
  rep(rotate(a, 1), v, 0) $
function next (a, v) : ([alpha], alpha) -> [alpha] :: (alpha in any) =
  rep(rotate(a, -1), v, length(a) - 1) $
function pack_index (flags) : [bool] -> [int] =
  old_pack(index_l(flags), flags) $
function unpack (v, flags) : ([alpha], [bool]) -> [alpha] :: (alpha in any) =
  len_put(v, pack_index(flags), length(flags)) $
function reverse (a) : [alpha] -> [alpha] :: (alpha in any) =
  permute_nocheck(a, iseq_l(length(a) - 1, -1, a)) $
function segjoin (v1, p1, v2, p2) : ([[alpha]], [int], [[alpha]], [int]) -> [[alpha]] :: (alpha in any) =
  let l1 = v.length(v1);
      l2 = v.length(v2);
      ll = join(l1, p1, l2, p2);
      offsets = plus_scan(ll);
      pos1 = positions_from_offsets(get_nocheck(offsets, p1), v1);
      pos2 = positions_from_offsets(get_nocheck(offsets, p2), v2);
  in
    partition(join(flatten(v1), pos1, flatten(v2), pos2), ll) $
__prim function join (v1, p1, v2, p2) : ([alpha], [int], [alpha], [int]) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | put_scalar(v1, p1, len_put_scalar(v2, p2, length(v1) + length(v2)))
    | segjoin(v1, p1, v2, p2) $
function `++` (v1, v2) : ([alpha], [alpha]) -> [alpha] :: (alpha in any) =
  join(v1, iseq_l(0, 1, v1), v2, iseq_l(length(v1), 1, v2)) $
function cons (a, v) : (alpha, [alpha]) -> [alpha] :: (alpha in any) =
  dist(a, 1) ++ v $
function snoc (v, a) : ([alpha], alpha) -> [alpha] :: (alpha in any) =
  v ++ dist(a, 1) $
function make_sequence (v, a) =
  v ++ dist(a, 1) $
__prim function vpair (a, b) : (alpha, alpha) -> [alpha] :: (alpha in any) =
  __poly_typecase alpha
    | rep(dist(b, 2), a, 0)
    | partition(a ++ b, vpair(length(a), length(b))) $
function vsep (a) : [alpha] -> alpha, alpha :: (alpha in any) =
  pair(elt_nocheck(a, 0), elt_nocheck(a, 1)) $
function subseq (v, start, end) : ([alpha], int, int) -> [alpha] :: (alpha in any) =
  get_nocheck(v, iseq1(start, end)) $
function drop (v, n) : ([alpha], int) -> [alpha] :: (alpha in any) =
  if n >= 0
    then subseq(v, n, length(v))
    else subseq(v, 0, length(v) + n) $
function take (v, n) : ([alpha], int) -> [alpha] :: (alpha in any) =
  if n >= 0
    then subseq(v, 0, n)
    else let len = length(v);
    in
      subseq(v, len + n, len) $
function flag_merge (flags, v1, v2) : ([bool], [alpha], [alpha]) -> [alpha] :: (alpha in any) =
  let i = index_l(flags);
  in
    join(v2, old_pack(i, flags), v1, old_pack(i, v.not(flags))) $
function cond_indices (flags) =
  let i = index_l(flags);
  in
    pair(old_pack(i, flags), old_pack(i, v.not(flags))) $
function flag_merge (flags, v1, v2) =
  let i = index(length(flags));
  in
    join(v2, old_pack(i, flags), v1, old_pack(i, v.not(flags))) $
function odd_elts (v) : [alpha] -> [alpha] :: (alpha in any) =
  get_nocheck(v, iseq(1, 2, length(v))) $
function even_elts (v) : [alpha] -> [alpha] :: (alpha in any) =
  get_nocheck(v, iseq(0, 2, length(v))) $
function interleave (a, b) : ([alpha], [alpha]) -> [alpha] :: (alpha in any) =
  flag_merge(v.oddp(index(length(a) + length(b))), a, b) $
function hash_float (a) =
  if a = 0.000000
    then 0
    else let a = abs(a);
        lg = trunc(log(a, 2.000000));
        sig = trunc(a / expt(2.000000, float(lg - 30)));
    in
      sig - lg $
__prim function hash_scalar (a) : alpha -> int :: (alpha in any) =
  __base_typecase alpha
    | int: a
    | bool: btoi(a)
    | char: char_code(a)
    | float: hash_float(a) $
function hash_vector (a) =
  sum({hashinternal(v) * (572197 ^ i) : v in a; i in index_l(a)}) $
function cheap_hash_vector (a) =
  sum({let j = i + 991892313;
    in
      hashinternal(v) * (j * (j * j)) : v in a; i in index_l(a)}) $
__prim function hashinternal (a) : alpha -> int :: (alpha in any) =
  __poly_typecase alpha
    | hash_scalar(a)
    | cheap_hash_vector(a)
    | let pair(a1, a2) = a;
    in
      hashinternal(a1) + (991892311 * hashinternal(a2)) $
function hash (a, l) =
  rem(max_int and hashinternal(a), l) $
function zip (a, b) =
  {pair(a, b) : a; b} $
function zip3 (a, b, c) =
  {pair(a, pair(b, c)) : a; b; c} $
function unzip (a) =
  pair({a1 : pair(a1, a2) in a}, {a2 : pair(a1, a2) in a}) $
function zip_over (a, b) =
  let __vector(sega, vala) = a;
      __vector(segb, valb) = b;
  in
    __vector(sega, pair(vala, valb)) $
__prim function prim_rank_up (v, seg) : (alpha, segdes) -> int :: (alpha in number) =
  __base_typecase alpha
    | int: __prim "RANK_UP INT" (v, seg)
    | float: __prim "RANK_UP FLOAT" (v, seg) $
__prim function prim_rank_down (v, seg) : (alpha, segdes) -> int :: (alpha in number) =
  __base_typecase alpha
    | int: __prim "RANK_DOWN INT" (v, seg)
    | float: __prim "RANK_DOWN FLOAT" (v, seg) $
%-- end "vector-ops.lnesl" --%
