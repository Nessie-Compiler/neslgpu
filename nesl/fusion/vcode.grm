(* vcode.grm
 *
 * COPYRIGHT (c) 2012 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *)

%name VCode;

%tokens
      : FUNC            ("FUNC")
      | ADD             ("+")
      | SUB             ("-")
      | MUL             ("*")
      | DIV             ("/")
      | MOD             ("%")
      | LT              ("<")
      | LTE             ("<=")
      | GT              (">")
      | GTE             (">=")
      | EQ              ("=")
      | NEQ             ("!=")
      | LSHIFT	        ("LSHIFT")
      | RSHIFT	        ("RSHIFT")
      | NOT	        ("NOT")
      | AND	        ("AND")
      | OR	        ("OR")
      | XOR	        ("XOR")
      | SELECT	        ("SELECT")
      | RAND	        ("RAND")
      | FLOOR	        ("FLOOR")
      | CEIL	        ("CEIL")
      | TRUNC	        ("TRUNC")
      | ROUND	        ("ROUND")
      | I_TO_F	        ("I_TO_F")
      | I_TO_B	        ("I_TO_B")
      | B_TO_I  	("B_TO_I")
      | LOG	        ("LOG")
      | SQRT	        ("SQRT")
      | EXP	        ("EXP")
      | SIN	        ("SIN")
      | COS	        ("COS")
      | TAN	        ("TAN")
      | ASIN	        ("ASIN")
      | ACOS	        ("ACOS")
      | ATAN	        ("ATAN")
      | SINH	        ("SINH")
      | COSH	        ("COSH")
      | TANH	        ("TANH")
      | ADD_SCAN	("+_SCAN")
      | MUL_SCAN	("*_SCAN")
      | MAX_SCAN	("MAX_SCAN")
      | MIN_SCAN	("MIN_SCAN")
      | AND_SCAN	("AND_SCAN")
      | OR_SCAN 	("OR_SCAN")
      | XOR_SCAN	("XOR_SCAN")
      | ADD_REDUCE	("+_REDUCE")
      | MUL_REDUCE	("*_REDUCE")
      | MAX_REDUCE	("MAX_REDUCE")
      | MIN_REDUCE	("MIN_REDUCE")
      | AND_REDUCE	("AND_REDUCE")
      | OR_REDUCE	("OR_REDUCE")
      | XOR_REDUCE	("XOR_REDUCE")
      | PERMUTE	        ("PERMUTE")
      | DPERMUTE	("DPERMUTE")
      | FPERMUTE	("FPERMUTE")
      | BPERMUTE	("BPERMUTE")
      | BFPERMUTE	("BFPERMUTE")
      | DFPERMUTE	("DFPERMUTE")
      | EXTRACT	        ("EXTRACT")
      | REPLACE	        ("REPLACE")
      | PACK	        ("PACK")
      | RANK_UP	        ("RANK_UP")
      | RANK_DOWN	("RANK_DOWN")
      | DIST	        ("DIST")
      | INDEX	        ("INDEX")
      | LENGTH	        ("LENGTH")
      | MAKE_SEGDES	("MAKE_SEGDES")
      | LENGTHS 	("LENGTHS")
      | COPY	        ("COPY")
      | POP	        ("POP")
      | CPOP	        ("CPOP")
      | PAIR	        ("PAIR")
      | UNPAIR	        ("UNPAIR")
      | CALL	        ("CALL")
      | RET	        ("RET")
      | IF              ("IF")
      | ELSE            ("ELSE")
      | ENDIF           ("ENDIF")
      | CONST           ("CONST")
      | READ	        ("READ")
      | WRITE	        ("WRITE")
      | FOPEN	        ("FOPEN")
      | FCLOSE	        ("FCLOSE")
      | FWRITE	        ("FWRITE")
      | FREAD	        ("FREAD")
      | FREAD_CHAR	("FREAD_CHAR")
      | EXIT	        ("EXIT")
      | START_TIMER	("START_TIMER")
      | STOP_TIMER	("STOP_TIMER")
      | SRAND	        ("SRAND")
      | BOOL            ("BOOL")
      | INT             ("INT")
      | FLOAT           ("FLOAT")
      | CHAR            ("CHAR")
      | SEGDES          ("SEGDES")
      | LP              ("(")
      | RP              (")")
      | LABEL of Atom.atom
      | NUM of IntInf.int
      | REAL of string
      | BOOLEAN of string       (* "T" or "F" *)
      | STRING of string        (* string literal *)
      | STREAM of string        (* "STDIN", "STDOUT", "STDERR", or "NULL_STREAM" *)
      ;

%defs(
  structure VC = VCode
);

Program
        : Function*
        ;

Function
        : "FUNC" LABEL Instruction* "RET"
                => (VC.FUNC(LABEL, Instruction))
        ;

Instruction
        : "+" IntOrFloat => (VC.ADD IntOrFloat)
        | "-" IntOrFloat => (VC.SUB IntOrFloat)
        | "*" IntOrFloat => (VC.MUL IntOrFloat)
        | "/" IntOrFloat => (VC.DIV IntOrFloat)
        | "%" => (VC.MOD)
        | "<" IntOrFloat => (VC.LT IntOrFloat)
        | "<=" IntOrFloat => (VC.LTE IntOrFloat)
        | ">" IntOrFloat => (VC.GT IntOrFloat)
        | ">=" IntOrFloat => (VC.GTE IntOrFloat)
        | "=" IntOrFloat => (VC.EQ IntOrFloat)
        | "!=" IntOrFloat => (VC.NEQ IntOrFloat)
        | "LSHIFT" => (VC.LSHIFT)
        | "RSHIFT" => (VC.RSHIFT)
        | "NOT" BoolOrInt => (VC.NOT BoolOrInt)
        | "AND" BoolOrInt => (VC.AND BoolOrInt)
        | "OR" BoolOrInt => (VC.OR BoolOrInt)
        | "XOR" BoolOrInt => (VC.XOR BoolOrInt)
        | "SELECT" BoolIntOrFloat => (VC.SELECT BoolIntOrFloat)
        | "RAND" => (VC.RAND)
        | "FLOOR" => (VC.FLOOR)
        | "CEIL" => (VC.CEIL)
        | "TRUNC" => (VC.TRUNC)
        | "ROUND" => (VC.ROUND)
        | "I_TO_F" => (VC.I_TO_F)
        | "I_TO_B" => (VC.I_TO_B)
        | "B_TO_I" => (VC.B_TO_I)
        | "LOG" => (VC.LOG)
        | "SQRT" => (VC.SQRT)
        | "EXP" => (VC.EXP)
        | "SIN" => (VC.SIN)
        | "COS" => (VC.COS)
        | "TAN" => (VC.TAN)
        | "ASIN" => (VC.ASIN)
        | "ACOS" => (VC.ACOS)
        | "ATAN" => (VC.ATAN)
        | "SINH" => (VC.SINH)
        | "COSH" => (VC.COSH)
        | "TANH" => (VC.TANH)
        | "+_SCAN" IntOrFloat => (VC.ADD_SCAN IntOrFloat)
        | "*_SCAN" IntOrFloat => (VC.MUL_SCAN IntOrFloat)
        | "MAX_SCAN" IntOrFloat => (VC.MAX_SCAN IntOrFloat)
        | "MIN_SCAN" IntOrFloat => (VC.MIN_SCAN IntOrFloat)
        | "AND_SCAN" BoolOrInt => (VC.AND_SCAN BoolOrInt)
        | "OR_SCAN" BoolOrInt => (VC.OR_SCAN BoolOrInt)
        | "XOR_SCAN" BoolOrInt => (VC.XOR_SCAN BoolOrInt)
        | "+_REDUCE" IntOrFloat => (VC.ADD_REDUCE IntOrFloat)
        | "*_REDUCE" IntOrFloat => (VC.MUL_REDUCE IntOrFloat)
        | "MAX_REDUCE" IntOrFloat => (VC.MAX_REDUCE IntOrFloat)
        | "MIN_REDUCE" IntOrFloat => (VC.MIN_REDUCE IntOrFloat)
        | "AND_REDUCE" BoolOrInt => (VC.AND_REDUCE BoolOrInt)
        | "OR_REDUCE" BoolOrInt => (VC.OR_REDUCE BoolOrInt)
        | "XOR_REDUCE" BoolOrInt => (VC.XOR_REDUCE BoolOrInt)
        | "PERMUTE" BoolIntOrFloat => (VC.PERMUTE BoolIntOrFloat)
        | "DPERMUTE" BoolIntOrFloat => (VC.DPERMUTE BoolIntOrFloat)
        | "FPERMUTE" BoolIntOrFloat => (VC.FPERMUTE BoolIntOrFloat)
        | "BPERMUTE" BoolIntOrFloat => (VC.BPERMUTE BoolIntOrFloat)
        | "BFPERMUTE" BoolIntOrFloat => (VC.BFPERMUTE BoolIntOrFloat)
        | "DFPERMUTE" BoolIntOrFloat => (VC.DFPERMUTE BoolIntOrFloat)
        | "EXTRACT" BoolIntOrFloat => (VC.EXTRACT BoolIntOrFloat)
        | "REPLACE" BoolIntOrFloat => (VC.REPLACE BoolIntOrFloat)
        | "PACK" BoolIntOrFloat => (VC.PACK BoolIntOrFloat)
        | "RANK_UP" IntOrFloat => (VC.RANK_UP IntOrFloat)
        | "RANK_DOWN" IntOrFloat => (VC.RANK_DOWN IntOrFloat)
        | "DIST" BoolIntOrFloat => (VC.DIST BoolIntOrFloat)
        | "INDEX" => (VC.INDEX)
        | "LENGTH" BoolIntOrFloat => (VC.LENGTH BoolIntOrFloat)
        | "MAKE_SEGDES" => (VC.MAKE_SEGDES)
        | "LENGTHS" => (VC.LENGTHS)
        | "COPY" Offset Offset => (VC.COPY(Offset1, Offset2))
        | "POP" Offset Offset => (VC.POP(Offset1, Offset2))
        | "CPOP" Offset Offset => (VC.CPOP(Offset1, Offset2))
        | "PAIR" => (VC.PAIR)
        | "UNPAIR" => (VC.UNPAIR)
        | "CALL" LABEL => (VC.CALL LABEL)
        | "IF" Instruction* "ELSE" Instruction* "ENDIF"
                => (VC.IF(Instruction1, Instruction2))
        | "CONST" Constant => (Constant)
        | "READ" Type => (VC.READ Type)
        | "WRITE" Type => (VC.WRITE Type)
        | "FOPEN" => (VC.FOPEN)
        | "FCLOSE" => (VC.FCLOSE)
        | "FWRITE" Type => (VC.FWRITE Type)
        | "FREAD" Type => (VC.FREAD Type)
        | "FREAD_CHAR" => (VC.FREAD_CHAR)
        | "EXIT" => (VC.EXIT)
        | "START_TIMER" => (VC.START_TIMER)
        | "STOP_TIMER" => (VC.STOP_TIMER)
        | "SRAND" "INT" => (VC.SRAND)
        ;

Offset
	: NUM			=> (IntInf.toInt NUM)
	;

Constant
        : "INT" NumValue        => (VC.CONST(VC.INT, [NumValue]))
        | "INT" STREAM          => (VC.CONST(VC.INT, [STREAM]))
        | "FLOAT" REAL          => (VC.CONST(VC.FLOAT, [REAL]))
        | "BOOL" BOOLEAN        => (VC.CONST(VC.BOOL, [BOOLEAN]))
        | "SEGDES" NumValue     => (VC.CONST(VC.SEGDES, [NumValue]))
        | "CHAR" STRING         => (VC.CONST(VC.CHAR, [STRING]))
        | Type "(" Value* ")"   => (VC.CONST(Type, Value))
        ;

NumValue
        : NUM                   => (if (NUM < 0)
                                    then "-" ^ IntInf.toString(~NUM)
                                    else IntInf.toString NUM)
        ;

Value
        : NumValue              => (NumValue)
        | REAL                  => (REAL)
        | BOOLEAN               => (BOOLEAN)
        ;

IntOrFloat
        : "INT" => (VC.INT)
        | "FLOAT" => (VC.FLOAT)
        ;

BoolOrInt
        : "BOOL" => (VC.BOOL)
        | "INT" => (VC.INT)
        ;

BoolIntOrFloat
        : "BOOL" => (VC.BOOL)
        | "INT" => (VC.INT)
        | "FLOAT" => (VC.FLOAT)
        ;

Type   
        : "BOOL" => (VC.BOOL)
        | "INT" => (VC.INT)
        | "FLOAT" => (VC.FLOAT)
        | "CHAR" => (VC.CHAR)
        | "SEGDES" => (VC.SEGDES)
        ;
        