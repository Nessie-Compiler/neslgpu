(* muladd-vcode.sml
 *
 * COPYRIGHT (c) 2012 The Manticore Project (http://manticore.cs.uchicago.edu)
 * All rights reserved.
 *
 * example
 *)

structure MulAdd =
  struct

    local
      open VCode
      fun FUNC (lab, body) = VCode.FUNC(Atom.atom lab, body)
      fun CALL lab = VCode.CALL(Atom.atom lab)
    in
      val prog = [
          (* Generated by the NESL Compiler, Version 3.1.1, on 2/7/2012 10:40. *)
            FUNC("MAIN1_1", [
                CONST(INT, ["10000000"]),
                CALL "BENCH_4"
              ]),
            FUNC("DIST_5", [
                MAKE_SEGDES,
                COPY(1, 0),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "PRIM-DIST_6"
              ]),
            FUNC("LENGTH_24", [
                POP(2, 0),
                LENGTHS
              ]),
            FUNC("LENGTH_3", [
                POP(1, 0),
                LENGTHS
              ]),
            FUNC("MULADD1_20", [
                CPOP(2, 4),
                CPOP(2, 4),
                CPOP(2, 4),
                CALL "ZIP-OVER_21",
                CALL "ZIP-OVER_23",
                COPY(1, 3),
                CPOP(1, 4),
                CPOP(1, 4),
                CPOP(1, 4),
                COPY(1, 3),
                POP(1, 0),
                MUL INT,
                CPOP(1, 3),
                CPOP(1, 3),
                POP(1, 0),
                ADD INT
              ]),
            FUNC("PUT-SCALAR_18", [
                CPOP(2, 4),
                CPOP(2, 4),
                POP(1, 1),
                CPOP(2, 3),
                COPY(1, 1),
                CPOP(1, 4),
                CPOP(1, 4),
                CPOP(1, 3),
                CPOP(1, 5),
                CPOP(1, 5),
                DPERMUTE BOOL
              ]),
            FUNC("PUT_18", [
                CPOP(2, 4),
                CPOP(2, 4),
                CPOP(2, 4),
                CALL "PUT-SCALAR_18"
              ]),
            FUNC("ZIP-OVER_23", [
                COPY(2, 3),
                CALL "LENGTH_3",
                COPY(3, 1),
                CALL "LENGTH_24",
                NEQ INT,
                IF([
                    CONST(INT, ["53"]),
                    MAKE_SEGDES,
                    CONST(CHAR, ["\nRUNTIME ERROR: Length mismatch in an apply-to-each.\n"]),
                    CALL "PRINT_STRING_15",
                    POP(1, 0),
                    CONST(INT, ["0"]),
                    EXIT,
                    POP(1, 0),
                    CONST(BOOL, ["T"])
                  ], [ (* ELSE *)
                    CONST(BOOL, ["F"])
                  ]), (* ENDIF *)
                POP(1, 0),
                CPOP(2, 3),
                CPOP(3, 2),
                POP(1, 2),
                CPOP(1, 3),
                CPOP(1, 3),
                CPOP(2, 2)
              ]),
            FUNC("PRIM-DIST_8", [
                CPOP(1, 1),
                CPOP(1, 1),
                DIST BOOL
              ]),
            FUNC("PRIM-COUNT_8", [
                CPOP(1, 1),
                B_TO_I,
                CPOP(1, 1),
                ADD_REDUCE INT
              ]),
            FUNC("PLUSP_6", [
                CPOP(1, 1),
                CONST(INT, ["0"]),
                COPY(1, 2),
                CALL "PRIM-DIST_6",
                CPOP(1, 2),
                POP(1, 0),
                GT INT
              ]),
            FUNC("RAND_6", [
                COPY(1, 1),
                COPY(1, 1),
                CALL "PLUSP_6",
                COPY(1, 1),
                POP(1, 0),
                NOT BOOL,
                COPY(1, 1),
                LENGTHS,
                COPY(1, 1),
                COPY(1, 3),
                CALL "PRIM-COUNT_8",
                COPY(1, 1),
                COPY(1, 1),
                SUB INT,
                COPY(1, 2),
                CONST(INT, ["0"]),
                EQ INT,
                IF([
                    POP(1, 3),
                    POP(1, 0),
                    POP(1, 1),
                    POP(1, 0),
                    CONST(BOOL, [])
                  ], [ (* ELSE *)
                    CPOP(1, 1),
                    COPY(1, 2),
                    EQ INT,
                    IF([
                        POP(1, 2),
                        POP(1, 0),
                        POP(1, 0),
                        CONST(INT, ["55"]),
                        MAKE_SEGDES,
                        CONST(CHAR, ["\nRUNTIME ERROR: Rand only works with positive numbers.\n"]),
                        CALL "PRINT_STRING_15",
                        POP(1, 0),
                        CONST(INT, ["0"]),
                        EXIT,
                        POP(1, 0),
                        CONST(BOOL, ["T"]),
                        COPY(1, 1),
                        CALL "PRIM-DIST_8"
                      ], [ (* ELSE *)
                        CPOP(1, 1),
                        EQ INT,
                        IF([
                            POP(1, 0),
                            CONST(BOOL, ["F"]),
                            COPY(1, 1),
                            CALL "PRIM-DIST_8"
                          ], [ (* ELSE *)
                            CONST(INT, ["0"]),
                            CONST(INT, ["1"]),
                            COPY(1, 3),
                            INDEX,
                            COPY(1, 2),
                            CPOP(1, 1),
                            CPOP(1, 2),
                            COPY(1, 2),
                            PACK INT,
                            COPY(1, 1),
                            POP(2, 2),
                            COPY(2, 0),
                            POP(1, 0),
                            COPY(1, 0),
                            CONST(INT, ["55"]),
                            MAKE_SEGDES,
                            CONST(CHAR, ["\nRUNTIME ERROR: Rand only works with positive numbers.\n"]),
                            CALL "PRINT_STRING_15",
                            POP(1, 0),
                            CONST(INT, ["0"]),
                            EXIT,
                            POP(1, 0),
                            CONST(BOOL, ["T"]),
                            CPOP(1, 2),
                            CALL "PRIM-DIST_8",
                            CPOP(2, 2),
                            COPY(1, 4),
                            CONST(BOOL, ["F"]),
                            COPY(1, 6),
                            CALL "PRIM-DIST_8",
                            CALL "PUT_18",
                            POP(1, 1)
                          ]) (* ENDIF *)
                      ]) (* ENDIF *)
                  ]), (* ENDIF *)
                POP(1, 0),
                CPOP(1, 1),
                CPOP(1, 1),
                POP(1, 0),
                RAND
              ]),
            FUNC("PRIM-DIST_6", [
                CPOP(1, 1),
                CPOP(1, 1),
                DIST INT
              ]),
            FUNC("BENCH_4", [
                CONST(INT, ["100"]),
                COPY(1, 1),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["100"]),
                COPY(1, 3),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["100"]),
                CPOP(1, 5),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["0"]),
                START_TIMER,
                POP(1, 0),
                CPOP(2, 4),
                CPOP(2, 4),
                CPOP(2, 4),
                CALL "MULADD1_20",
                CONST(INT, ["0"]),
                POP(1, 0),
                STOP_TIMER,
                POP(2, 1)
              ]),
            FUNC("ZIP-OVER_21", [
                COPY(2, 2),
                CALL "LENGTH_3",
                COPY(2, 1),
                CALL "LENGTH_3",
                NEQ INT,
                IF([
                    CONST(INT, ["53"]),
                    MAKE_SEGDES,
                    CONST(CHAR, ["\nRUNTIME ERROR: Length mismatch in an apply-to-each.\n"]),
                    CALL "PRINT_STRING_15",
                    POP(1, 0),
                    CONST(INT, ["0"]),
                    EXIT,
                    POP(1, 0),
                    CONST(BOOL, ["T"])
                  ], [ (* ELSE *)
                    CONST(BOOL, ["F"])
                  ]), (* ENDIF *)
                POP(1, 0),
                CPOP(2, 2),
                CPOP(2, 2),
                POP(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2)
              ]),
            FUNC("PRINT_STRING_15", [
                POP(1, 1),
                WRITE CHAR,
                POP(2, 0),
                CONST(BOOL, ["T"])
              ])
          ]
    val optProg = [
            (* Generated by the NESL Compiler, Version 3.1.1, on 2/10/2012 14:50. *)
            FUNC("MAIN1_1", [
                CONST(INT, ["10000000"]),
                CALL "BENCH_4"
              ]),
            FUNC("DIST_5", [
                MAKE_SEGDES,
                COPY(1, 0),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "PRIM-DIST_6"
              ]),
            FUNC("MULADD_7", [
                CPOP(2, 4),
                CPOP(2, 4),
                CPOP(2, 4),
                CALL "ZIP-OVER_8",
                CALL "ZIP-OVER_10",
                COPY(1, 3),
                CPOP(1, 4),
                CPOP(1, 4),
                CPOP(1, 4),
                COPY(1, 3),
                POP(1, 0),
                MUL INT,
                CPOP(1, 3),
                CPOP(1, 3),
                POP(1, 0),
                ADD INT
              ]),
            FUNC("ZIP-OVER_10", [
                CPOP(2, 3),
                CPOP(3, 2),
                POP(1, 2),
                CPOP(1, 3),
                CPOP(1, 3),
                CPOP(2, 2)
              ]),
            FUNC("RAND_6", [
                CPOP(1, 1),
                CPOP(1, 1),
                POP(1, 0),
                RAND
              ]),
            FUNC("PRIM-DIST_6", [
                CPOP(1, 1),
                CPOP(1, 1),
                DIST INT
              ]),
            FUNC("BENCH_4", [
                CONST(INT, ["100"]),
                COPY(1, 1),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["100"]),
                COPY(1, 3),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["100"]),
                CPOP(1, 5),
                CALL "DIST_5",
                COPY(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2),
                CALL "RAND_6",
                CONST(INT, ["0"]),
                START_TIMER,
                POP(1, 0),
                CPOP(2, 4),
                CPOP(2, 4),
                CPOP(2, 4),
                CALL "MULADD_7",
                CONST(INT, ["0"]),
                POP(1, 0),
                STOP_TIMER,
                POP(2, 1)
              ]),
            FUNC("ZIP-OVER_8", [
                CPOP(2, 2),
                CPOP(2, 2),
                POP(1, 1),
                CPOP(1, 2),
                CPOP(1, 2),
                CPOP(1, 2)
              ])
          ]
    end (* local *)

  end
